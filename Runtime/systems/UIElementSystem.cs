using System;
using UnityEngine;
using System.Linq;
using Unity.Entities;
using Unity.Collections;
using System.Collections.Generic;
using UnityEngine.UIElements;
using UnityEditor;

// Generated by Copilot
public abstract partial class UIElementSystem<T, U> : SystemBase
    where T : VisualElement, new()
    where U : class, IComponentData, IValueComponent<T>, new() {

    //ECS representation of the UI element the derived system is interested in
    protected Entity BackingEntity;
    protected T Element;

    //Abstract field for string Name
    protected abstract string Name { get; }
    protected abstract void Initialize(VisualElement root, T element);

    //An enum of ElementSourceMode that is either FileOnDisk or ExistsInTree
    protected abstract ElementSourceMode SourceMode { get; }
    protected enum ElementSourceMode {
        FileOnDisk,
        ExistsInTree
    }
    protected void Log(string message, LogType logType = LogType.Log) {
        message = $"[{this.GetType().Name}]: {message}";
        switch (logType) {
            case LogType.Error:
                Debug.LogError(message);
                break;
            case LogType.Warning:
                Debug.LogWarning(message);
                break;
            default:
                Debug.Log(message);
                break;
        }
    }

    //Seal up  OnStartRunning so that it can't be overridden accidently
    protected sealed override void OnStartRunning() {
        if (!Setup(out var uiDocument, out var root))
            return;


        //Create a representation of the UI element in ECS space
        BackingEntity = EntityManager.CreateEntity();
        // Debug.Log($"UI element [{Name}] represented as entity [{BackingEntity}]");

        //Name the backing entity
        EntityManager.AddComponentData(BackingEntity, new U {
            ValueOuter = Element
        });

        Initialize(root, Element);
    }
}